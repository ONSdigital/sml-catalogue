name: Build and deploy

on:
  workflow_call:
    inputs:
      workspace:
        required: true
        type: string
      environment:
        required: true
        type: string
      state_bucket:
        required: true
        type: string
    secrets:
      DEPLOYMENT_ROLE:
        required: true

permissions:
  contents: read    # This is required for actions/checkout
jobs:
  run-terraform:
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    container: public.ecr.aws/ons-spp/terraform:1
    concurrency: ${{github.workflow}}-${{inputs.workspace}}-${{inputs.environment}}-deploy
    permissions:
      id-token: write
      contents: read    # This is required for actions/checkout
      pull-requests: write
    outputs:
      cloudfront_id: ${{ steps.apply.outputs.cloudfront_id }}
    steps:
      - run: echo ${{github.event_name}}
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Configure AWS credentials from Dev account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{secrets.DEPLOYMENT_ROLE}}
          aws-region: eu-west-2
      - name: terraform format
        run: terraform fmt -check -recursive -diff
      - id: apply
        name: Apply terraform
        run: |
          cd terraform
          environment=${{inputs.environment}}
          echo "${environment}"
          terraform init \
            -upgrade \
            -backend-config "bucket=${{inputs.state_bucket}}" \
            -backend-config "key=sml-portal.tfstate" \
            -backend-config "workspace_key_prefix=workspace"
          echo ${{github.event.pull_request.merged}}
          export TF_WORKSPACE=$(echo ${{inputs.workspace}} | tr "[:upper:]" "[:lower:]")
          echo $TF_WORKSPACE
          terraform apply \
            -auto-approve \
            -var="environment=${environment}"
          echo "DEPLOY_URL=`terraform output -raw website_url`" >> $GITHUB_ENV
          echo "::set-output name=cloudfront_id::`terraform output -raw cloudfront_id`"
      - name: Add deploy URL to PR comment
        if: github.event_name == 'pull_request'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Workspace URL: ${{env.DEPLOY_URL}}
          allow-repeats: false
  build-files:
    runs-on: ubuntu-latest
    permissions:
      contents: read 
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Install pipenv
        run: pip install pipenv
      - name: Create venv
        run: python3 -m venv venv
      - name: Install dependencies
        run: |
          source venv/bin/activate
          pipenv sync --dev
      - name: Code Formatter
        run: |
          source venv/bin/activate
          black --check --diff sml_builder
      - name: Linting
        run: |
          source venv/bin/activate
          pylint sml_builder
          flake8 sml_builder
      - name: Security Scanner
        run: |
          source venv/bin/activate
          bandit -r sml_builder 
      - name: Freeze flask
        run: |
          source venv/bin/activate
          echo "Installing the ONS design system"
          ./get_design_system.sh
          echo "Freezing flask"
          python freeze.py
          zip -r build.zip build
      - name: Upload files
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build.zip
          retention-days: 2
  deploy:
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    needs: [run-terraform, build-files]
    permissions:
      id-token: write
      contents: read 
    concurrency: ${{github.workflow}}-${{inputs.workspace}}-${{inputs.environment}}-deploy
    steps:
      - name: Configure AWS credentials from Dev account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{secrets.DEPLOYMENT_ROLE}}
          aws-region: eu-west-2
      - name: Download built files
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./
      - name: Deploy built files
        run: |
          unzip build.zip
          workspace_name=$(echo "${{inputs.workspace}}" | tr "[:upper:]" "[:lower:]")
          environment=$(echo "${{inputs.environment}}" | tr "[:upper:]" "[:lower:]")
          aws s3 sync build s3://sml-portal-$environment-$workspace_name --delete --content-type "text/html" --exclude "*.css"
          aws s3 sync build s3://sml-portal-$environment-$workspace_name --delete --exclude "*" --include "*.css"
      - name: Clear cache
        run: aws cloudfront create-invalidation --distribution-id ${{needs.run-terraform.outputs.cloudfront_id}} --paths "/*" > /dev/null
